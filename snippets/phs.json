{
    "Function Definition": {
        "prefix": "fn",
        "body": [
            "fn ${1:function_name}(${2:params}) {",
            "    ${3:// function body}",
            "    ${4:return result;}",
            "}"
        ],
        "description": "Function definition in PHS"
    },
    "If Statement": {
        "prefix": "if",
        "body": [
            "if ${1:condition} {",
            "    ${2:// code}",
            "}"
        ],
        "description": "If statement"
    },
    "If Else Statement": {
        "prefix": "ifelse",
        "body": [
            "if ${1:condition} {",
            "    ${2:// if code}",
            "} else {",
            "    ${3:// else code}",
            "}"
        ],
        "description": "If-else statement"
    },
    "While Loop": {
        "prefix": "while",
        "body": [
            "while ${1:condition} {",
            "    ${2:// loop body}",
            "}"
        ],
        "description": "While loop"
    },
    "For Loop": {
        "prefix": "for",
        "body": [
            "for ${1:item} in ${2:array} {",
            "    ${3:// loop body}",
            "}"
        ],
        "description": "For loop"
    },
    "Let Variable": {
        "prefix": "let",
        "body": [
            "let ${1:variable} = ${2:value};"
        ],
        "description": "Variable declaration with let"
    },
    "Const Variable": {
        "prefix": "const",
        "body": [
            "const ${1:variable} = ${2:value};"
        ],
        "description": "Constant declaration"
    },
    "Print Statement": {
        "prefix": "print",
        "body": [
            "print(${1:value});"
        ],
        "description": "Print statement"
    },
    "Debug Statement": {
        "prefix": "debug",
        "body": [
            "debug(${1:value});"
        ],
        "description": "Debug statement"
    },
    "Array Declaration": {
        "prefix": "array",
        "body": [
            "let ${1:array_name} = [${2:elements}];"
        ],
        "description": "Array declaration"
    },
    "Object Declaration": {
        "prefix": "object",
        "body": [
            "let ${1:object_name} = #{",
            "    ${2:key}: ${3:value}",
            "};"
        ],
        "description": "Object/map declaration"
    },
    "String Template": {
        "prefix": "template",
        "body": [
            "`${1:template string with \\${${2:variable}}}`"
        ],
        "description": "Template string with interpolation"
    },
    "Phlow Main Access": {
        "prefix": "main",
        "body": [
            "main.${1:property}"
        ],
        "description": "Access main context"
    },
    "Phlow Payload Access": {
        "prefix": "payload",
        "body": [
            "payload.${1:property}"
        ],
        "description": "Access payload data"
    },
    "Phlow Steps Access": {
        "prefix": "steps",
        "body": [
            "steps.${1:step_id}.${2:property}"
        ],
        "description": "Access steps data"
    },
    "Phlow Environment": {
        "prefix": "envs",
        "body": [
            "envs.${1:VARIABLE_NAME}"
        ],
        "description": "Access environment variables"
    },
    "Phlow Log Function": {
        "prefix": "log",
        "body": [
            "log(\"${1|info,debug,warn,error|}\", \"${2:message}\");"
        ],
        "description": "Call Phlow log function"
    },
    "Try Catch": {
        "prefix": "try",
        "body": [
            "try {",
            "    ${1:// code that might fail}",
            "} catch(${2:error}) {",
            "    ${3:// error handling}",
            "}"
        ],
        "description": "Try-catch block"
    },
    "Switch Statement": {
        "prefix": "switch",
        "body": [
            "switch ${1:expression} {",
            "    ${2:value1} => ${3:result1},",
            "    ${4:value2} => ${5:result2},",
            "    _ => ${6:default_result}",
            "}"
        ],
        "description": "Switch expression"
    }
}
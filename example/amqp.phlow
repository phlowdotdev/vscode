main: http_server
modules: 
  - module: http_server
    version: latest
    with:
      port: 8080
  - module: amqp
    version: latest
    name: rabbitmq
    with:
      routing_key: my.routing.key
      exchange: my.exchange
      queue_name: my.queue
      exchange_type: direct
      definition:
        vhosts:
          - name: "/"
        exchanges:
          - name: my.exchange
            vhost: "/"
            type: direct
            durable: true
            auto_delete: false
            internal: false
            arguments: {}
        queues:
          - name: my.queue
            vhost: "/"
            durable: true
            auto_delete: false
            arguments: {}
        bindings:
          - source: my.exchange
            vhost: "/"
            destination: my.queue
            destination_type: queue
            routing_key: my.routing.key
            arguments: {}
    version: latest
steps:
  - condition:
      ## You can create conditions in many ways      
      ##
      ## 1. Using the `!phs` directive to evaluate an expression
      # left: !phs main.method
      # operator: equal
      # right: POST
      
      ## 2. Using the `!phs` directive to compare the result of an expression
      # left: !phs main.method == "POST"
      # operator: equal
      # right: true

      ## 3. Using the `!import` directive to import a script
      # left: !import scripts/validator.rhai
      # right: true
      # operator: equal
      
      ## 4. Using 'assert' directive to evaluate an expression
      assert: !import scripts/validator.rhai

      ## 5. Using 'assert' directive to compare the result of an expression
      # assert: !phs main.method == "POST"
    then: 
      steps:
        - use: log
          input:
            level: info
            message: !phs main
        - id: queue
          use: rabbitmq
          input:
            message: !phs main
        - return:
            status_code: 201
            body: !phs steps.queue
            headers:
              Content-Type: application/json
    else:
      return:
        status_code: 400
        body:
          message: "Invalid contract"
        headers:
          Content-Type: application/json

  
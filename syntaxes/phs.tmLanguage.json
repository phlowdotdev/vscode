{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Phlow Script (PHS)",
    "scopeName": "source.phs",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#variables"
        },
        {
            "include": "#phlow-variables"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.phs",
                    "match": "//.*$"
                },
                {
                    "name": "comment.block.phs",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.phs",
                    "match": "\\b(if|else|while|for|loop|break|continue|return|fn|let|const|true|false|null)\\b"
                },
                {
                    "name": "keyword.operator.phs",
                    "match": "\\b(and|or|not|in)\\b"
                },
                {
                    "name": "storage.type.phs",
                    "match": "\\b(int|float|bool|char|string|array|object|map)\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.assignment.phs",
                    "match": "(=|\\+=|-=|\\*=|/=|%=|\\|=|&=|\\^=|<<=|>>=)"
                },
                {
                    "name": "keyword.operator.comparison.phs",
                    "match": "(==|!=|<=|>=|<|>)"
                },
                {
                    "name": "keyword.operator.arithmetic.phs",
                    "match": "(\\+|\\-|\\*|/|%|\\*\\*)"
                },
                {
                    "name": "keyword.operator.logical.phs",
                    "match": "(&&|\\|\\||!)"
                },
                {
                    "name": "keyword.operator.bitwise.phs",
                    "match": "(&|\\||\\^|~|<<|>>)"
                },
                {
                    "name": "keyword.operator.other.phs",
                    "match": "(\\?|:|\\.|,|;)"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "entity.name.function.phs",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*(?=\\s*\\()"
                },
                {
                    "name": "support.function.builtin.phs",
                    "match": "\\b(print|debug|type_of|len|is_empty|contains|push|pop|shift|unshift|clear|remove|insert|split|join|pad|trim|to_upper|to_lower|to_string|to_int|to_float|parse_int|parse_float|timestamp)\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.phs",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.phs",
                            "match": "\\\\[\"'\\\\nrtbfav]"
                        },
                        {
                            "name": "variable.other.interpolation.phs",
                            "match": "\\$\\{[^}]*\\}"
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.phs",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.phs",
                            "match": "\\\\[\"'\\\\nrtbfav]"
                        }
                    ]
                },
                {
                    "name": "string.template.phs",
                    "begin": "`",
                    "end": "`",
                    "patterns": [
                        {
                            "name": "constant.character.escape.phs",
                            "match": "\\\\[`\\\\nrtbfav]"
                        },
                        {
                            "name": "variable.other.interpolation.phs",
                            "match": "\\$\\{[^}]*\\}"
                        }
                    ]
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.hex.phs",
                    "match": "\\b0[xX][0-9a-fA-F]+\\b"
                },
                {
                    "name": "constant.numeric.binary.phs",
                    "match": "\\b0[bB][01]+\\b"
                },
                {
                    "name": "constant.numeric.octal.phs",
                    "match": "\\b0[oO][0-7]+\\b"
                },
                {
                    "name": "constant.numeric.float.phs",
                    "match": "\\b[0-9]+\\.[0-9]+([eE][+-]?[0-9]+)?\\b"
                },
                {
                    "name": "constant.numeric.integer.phs",
                    "match": "\\b[0-9]+\\b"
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "name": "variable.other.phs",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                }
            ]
        },
        "phlow-variables": {
            "patterns": [
                {
                    "name": "variable.other.phlow.phs",
                    "match": "\\b(main|payload|steps|envs)\\b"
                },
                {
                    "name": "support.function.phlow.phs",
                    "match": "\\b(log|query|producer|consumer)\\b"
                }
            ]
        }
    }
}